root
├── java.lang.Thread#run()
│   └── org.springframework.boot.SpringApplicationShutdownHook#run()
│       └── java.lang.Iterable#forEach(java.util.function.Consumer)
│           └── org.springframework.boot.SpringApplicationShutdownHook$$Lambda$731/0x0000000801124cf8#accept(java.lang.Object)
│               └── org.springframework.boot.SpringApplicationShutdownHook#closeAndWait(org.springframework.context.ConfigurableApplicationContext)
│                   └── org.springframework.context.support.AbstractApplicationContext#close()
│                       └── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#doClose()
│                           └── org.springframework.context.support.AbstractApplicationContext#doClose()
│                               └── org.springframework.context.support.DefaultLifecycleProcessor#onClose()
│                                   └── org.springframework.context.support.DefaultLifecycleProcessor#stopBeans()
│                                       └── org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup#stop()
│                                           └── org.springframework.context.support.DefaultLifecycleProcessor#doStop(java.util.Map,java.lang.String,java.util.concurrent.CountDownLatch,java.util.Set)
│                                               └── org.springframework.context.SmartLifecycle#stop(java.lang.Runnable)
│                                                   └── org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle#stop()
│                                                       └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#stop()
│                                                           └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#stopTomcat()
│                                                               └── org.apache.catalina.startup.Tomcat#stop()
│                                                                   └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                       └── org.apache.catalina.core.StandardServer#stopInternal()
│                                                                           └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                               └── org.apache.catalina.core.StandardService#stopInternal()
│                                                                                   └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                                       └── org.apache.catalina.core.ContainerBase#stopInternal()
│                                                                                           └── java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable)
│                                                                                               └── org.apache.tomcat.util.threads.InlineExecutorService#execute(java.lang.Runnable)
│                                                                                                   └── java.util.concurrent.FutureTask#run()
│                                                                                                       └── org.apache.catalina.core.ContainerBase$StopChild#call()
│                                                                                                           └── org.apache.catalina.core.ContainerBase$StopChild#call()
│                                                                                                               └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                                                                   └── org.apache.catalina.core.ContainerBase#stopInternal()
│                                                                                                                       └── java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable)
│                                                                                                                           └── org.apache.tomcat.util.threads.InlineExecutorService#execute(java.lang.Runnable)
│                                                                                                                               └── java.util.concurrent.FutureTask#run()
│                                                                                                                                   └── org.apache.catalina.core.ContainerBase$StopChild#call()
│                                                                                                                                       └── org.apache.catalina.core.ContainerBase$StopChild#call()
│                                                                                                                                           └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                                                                                               └── org.apache.catalina.core.StandardContext#stopInternal()
│                                                                                                                                                   └── org.apache.catalina.util.LifecycleBase#stop()
│                                                                                                                                                       └── org.apache.catalina.loader.WebappLoader#stopInternal()
│                                                                                                                                                           └── org.apache.catalina.loader.WebappClassLoaderBase#stop()
│                                                                                                                                                               └── org.apache.catalina.loader.WebappClassLoaderBase#clearReferences()
│                                                                                                                                                                   └── org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()
│                                                                                                                                                                       └── org.apache.catalina.loader.WebappClassLoaderBase#getResourceAsStream(java.lang.String)
│                                                                                                                                                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
│                                                                                                                                                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/apache/catalina/loader/JdbcLeakPrevention.class\\E"     }]},   "bundles":[] }
└── indi.yuluo.graalvm.DemoApplication#main(java.lang.String[])
    ├── org.springframework.boot.SpringApplication#run(java.lang.Class,java.lang.String[])
    │   └── org.springframework.boot.SpringApplication#run(java.lang.Class[],java.lang.String[])
    │       ├── org.springframework.boot.SpringApplication#<init>(java.lang.Class[])
    │       │   └── org.springframework.boot.SpringApplication#<init>(org.springframework.core.io.ResourceLoader,java.lang.Class[])
    │       │       └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class)
    │       │           └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
    │       │               └── org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation(java.lang.ClassLoader)
    │       │                   └── org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(java.lang.String,java.lang.ClassLoader)
    │       │                       └── java.util.concurrent.ConcurrentMap#computeIfAbsent(java.lang.Object,java.util.function.Function)
    │       │                           └── org.springframework.core.io.support.SpringFactoriesLoader$$Lambda$24/0x0000000800c24278#apply(java.lang.Object)
    │       │                               └── org.springframework.core.io.support.SpringFactoriesLoader#lambda$forResourceLocation$2(java.lang.ClassLoader,java.lang.ClassLoader,java.lang.String,java.lang.String)
    │       │                                   └── org.springframework.core.io.support.SpringFactoriesLoader#loadFactoriesResource(java.lang.ClassLoader,java.lang.String)
    │       │                                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/spring.factories\\E"     }]},   "bundles":[] }
    │       └── org.springframework.boot.SpringApplication#run(java.lang.String[])
    │           ├── org.springframework.boot.SpringApplication#refreshContext(org.springframework.context.ConfigurableApplicationContext)
    │           │   └── org.springframework.boot.SpringApplication#refresh(org.springframework.context.ConfigurableApplicationContext)
    │           │       └── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#refresh()
    │           │           └── org.springframework.context.support.AbstractApplicationContext#refresh()
    │           │               ├── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#onRefresh()
    │           │               │   └── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#createWebServer()
    │           │               │       ├── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#getWebServerFactory()
    │           │               │       │   └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String,java.lang.Class)
    │           │               │       │       └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │       │           └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │       │               └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │       │                   └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               ├── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)
    │           │               │       │                               │   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization(java.lang.Object,java.lang.String)
    │           │               │       │                               │       └── org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor#postProcessBeforeInitialization(java.lang.Object,java.lang.String)
    │           │               │       │                               │           └── org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor#postProcessBeforeInitialization(org.springframework.boot.web.server.ErrorPageRegistry)
    │           │               │       │                               │               └── org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor#getRegistrars()
    │           │               │       │                               │                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#getBeansOfType(java.lang.Class,boolean,boolean)
    │           │               │       │                               │                       └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │       │                               │                           └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │       │                               │                               └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │       │                               │                                   └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │       │                               │                                       └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                           └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                               └── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │       │                               │                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │       │                               │                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │       │                               │                                                                           └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │       │                               │                                                                               └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │       │                               │                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │       │                               │                                                                                       └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │       │                               │                                                                                           └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │       │                               │                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │       │                               │                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                           └── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │       │                               │                                                                                                                               └── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │       │                               │                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │       │                               │                                                                                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │       │                               │                                                                                                                                           └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │       │                               │                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │       │                               │                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │       │                               │                                                                                                                                                       └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │       │                               │                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │       │                               │                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                           └── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                               └── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                                   └── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                                       └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                                           └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │       │                               │                                                                                                                                                                                                               └── org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration#dispatcherServlet(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)
    │           │               │       │                               │                                                                                                                                                                                                                   └── jakarta.servlet.http.HttpServlet#<clinit>()
    │           │               │       │                               │                                                                                                                                                                                                                       └── java.util.ResourceBundle#getBundle(java.lang.String)
    │           │               │       │                               │                                                                                                                                                                                                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │       │                               │                                                                                                                                                                                                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │       │                               │                                                                                                                                                                                                                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"jakarta.servlet.http.LocalStrings",       "locales":[""]     }] }
    │           │               │       │                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                                       └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │       │                                           └── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │       │                                               └── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │       │                                                   └── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                                                       └── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                                                           └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │       │                                                               └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │       │                                                                   └── org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat#tomcatServletWebServerFactory(org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider,org.springframework.beans.factory.ObjectProvider)
    │           │               │       │                                                                       └── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#<init>()
    │           │               │       │                                                                           └── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#getDefaultServerLifecycleListeners()
    │           │               │       │                                                                               └── org.apache.catalina.core.AprLifecycleListener#<clinit>()
    │           │               │       │                                                                                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │       │                                                                                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │       │                                                                                           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │       │                                                                                               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │       │                                                                                                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │       │                                                                                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │       │                                                                                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │       │                                                                                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.core.LocalStrings",       "locales":[""]     }] }
    │           │               │       └── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#getWebServer(org.springframework.boot.web.servlet.ServletContextInitializer[])
    │           │               │           ├── org.apache.catalina.startup.Tomcat#<clinit>()
    │           │               │           │   ├── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │   │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │   │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │   │           └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │   │               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │   │                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │   │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │   │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.startup.LocalStrings",       "locales":[""]     }] }
    │           │               │           │   └── org.apache.tomcat.util.compat.JreCompat#<clinit>()
    │           │               │           │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.compat.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.apache.tomcat.util.modeler.Registry#<clinit>()
    │           │               │           │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.modeler.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.apache.catalina.connector.Connector#<clinit>()
    │           │               │           │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.connector.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#customizeConnector(org.apache.catalina.connector.Connector)
    │           │               │           │   └── org.apache.catalina.connector.Connector#setPort(int)
    │           │               │           │       └── org.apache.catalina.connector.Connector#setProperty(java.lang.String,java.lang.String)
    │           │               │           │           └── org.apache.tomcat.util.IntrospectionUtils#<clinit>()
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                           └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.apache.catalina.util.LifecycleBase#<clinit>()
    │           │               │           │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.util.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.apache.catalina.startup.Tomcat#getHost()
    │           │               │           │   └── org.apache.catalina.startup.Tomcat#getEngine()
    │           │               │           │       ├── org.apache.catalina.core.StandardEngine#<init>()
    │           │               │           │       │   └── org.apache.catalina.valves.ValveBase#<clinit>()
    │           │               │           │       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │       │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │       │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │       │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │       │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.valves.LocalStrings",       "locales":[""]     }] }
    │           │               │           │       └── org.apache.catalina.startup.Tomcat#createDefaultRealm()
    │           │               │           │           └── org.apache.catalina.realm.RealmBase#<clinit>()
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                           └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.realm.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#prepareContext(org.apache.catalina.Host,org.springframework.boot.web.servlet.ServletContextInitializer[])
    │           │               │           │   ├── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#resetDefaultLocaleMapping(org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext)
    │           │               │           │   │   └── org.apache.catalina.core.StandardContext#addLocaleEncodingMappingParameter(java.lang.String,java.lang.String)
    │           │               │           │   │       └── org.apache.catalina.core.StandardContext#getCharsetMapper()
    │           │               │           │   │           └── java.lang.reflect.Constructor#newInstance(java.lang.Object[])
    │           │               │           │   │               └── java.lang.reflect.Constructor#newInstanceWithCaller(java.lang.Object[],boolean,java.lang.Class)
    │           │               │           │   │                   └── jdk.internal.reflect.DelegatingConstructorAccessorImpl#newInstance(java.lang.Object[])
    │           │               │           │   │                       └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance(java.lang.Object[])
    │           │               │           │   │                           └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance0(java.lang.reflect.Constructor,java.lang.Object[])
    │           │               │           │   │                               └── org.apache.catalina.util.CharsetMapper#<init>()
    │           │               │           │   │                                   └── org.apache.catalina.util.CharsetMapper#<init>(java.lang.String)
    │           │               │           │   │                                       └── java.lang.Class#getResourceAsStream(java.lang.String)
    │           │               │           │   │                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │               │           │   │                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/apache/catalina/util/CharsetMapperDefault.properties\\E"     }]},   "bundles":[] }
    │           │               │           │   ├── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#configureTldPatterns(org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext)
    │           │               │           │   │   └── org.apache.catalina.core.StandardContext#getJarScanner()
    │           │               │           │   │       └── org.apache.tomcat.util.scan.StandardJarScanner#<clinit>()
    │           │               │           │   │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │   │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │   │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │   │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │   │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │   │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │   │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.scan.LocalStrings",       "locales":[""]     }] }
    │           │               │           │   └── org.apache.catalina.loader.WebappLoader#<clinit>()
    │           │               │           │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.loader.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory#getTomcatWebServer(org.apache.catalina.startup.Tomcat)
    │           │               │           │   └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#<init>(org.apache.catalina.startup.Tomcat,boolean,org.springframework.boot.web.server.Shutdown)
    │           │               │           │       └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#initialize()
    │           │               │           │           ├── org.apache.naming.ContextBindings#<clinit>()
    │           │               │           │           │   └── org.apache.naming.StringManager#getManager(java.lang.Class)
    │           │               │           │           │       └── org.apache.naming.StringManager#getManager(java.lang.String)
    │           │               │           │           │           └── org.apache.naming.StringManager#<init>(java.lang.String)
    │           │               │           │           │               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │           │                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │           │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │           │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.naming.LocalStrings",       "locales":[""]     }] }
    │           │               │           │           └── org.apache.catalina.startup.Tomcat#start()
    │           │               │           │               └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                   ├── org.apache.catalina.util.LifecycleBase#init()
    │           │               │           │                   │   └── org.apache.catalina.core.StandardServer#initInternal()
    │           │               │           │                   │       ├── org.apache.catalina.util.LifecycleBase#init()
    │           │               │           │                   │       │   └── org.apache.catalina.core.StandardService#initInternal()
    │           │               │           │                   │       │       └── org.apache.catalina.util.LifecycleBase#init()
    │           │               │           │                   │       │           └── org.apache.catalina.connector.Connector#initInternal()
    │           │               │           │                   │       │               └── org.apache.catalina.connector.CoyoteAdapter#<clinit>()
    │           │               │           │                   │       │                   └── org.apache.catalina.util.ServerInfo#<clinit>()
    │           │               │           │                   │       │                       └── java.lang.Class#getResourceAsStream(java.lang.String)
    │           │               │           │                   │       │                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │               │           │                   │       │                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/apache/catalina/util/ServerInfo.properties\\E"     }]},   "bundles":[] }
    │           │               │           │                   │       └── org.apache.catalina.mbeans.MBeanFactory#<clinit>()
    │           │               │           │                   │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                   │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                   │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                   │                       └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                   │                           └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                   │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                   │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                   │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.mbeans.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                   └── org.apache.catalina.core.StandardServer#startInternal()
    │           │               │           │                       └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                           └── org.apache.catalina.core.StandardService#startInternal()
    │           │               │           │                               └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                                   └── org.apache.catalina.core.StandardEngine#startInternal()
    │           │               │           │                                       └── org.apache.catalina.core.ContainerBase#startInternal()
    │           │               │           │                                           └── java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable)
    │           │               │           │                                               └── org.apache.tomcat.util.threads.InlineExecutorService#execute(java.lang.Runnable)
    │           │               │           │                                                   └── java.util.concurrent.FutureTask#run()
    │           │               │           │                                                       └── org.apache.catalina.core.ContainerBase$StartChild#call()
    │           │               │           │                                                           └── org.apache.catalina.core.ContainerBase$StartChild#call()
    │           │               │           │                                                               └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                                                                   └── org.apache.catalina.core.StandardHost#startInternal()
    │           │               │           │                                                                       └── org.apache.catalina.core.ContainerBase#startInternal()
    │           │               │           │                                                                           └── java.util.concurrent.AbstractExecutorService#submit(java.util.concurrent.Callable)
    │           │               │           │                                                                               └── org.apache.tomcat.util.threads.InlineExecutorService#execute(java.lang.Runnable)
    │           │               │           │                                                                                   └── java.util.concurrent.FutureTask#run()
    │           │               │           │                                                                                       └── org.apache.catalina.core.ContainerBase$StartChild#call()
    │           │               │           │                                                                                           └── org.apache.catalina.core.ContainerBase$StartChild#call()
    │           │               │           │                                                                                               └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                                                                                                   └── org.apache.catalina.core.StandardContext#startInternal()
    │           │               │           │                                                                                                       ├── org.apache.tomcat.websocket.server.WsSci#onStartup(java.util.Set,jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │   └── org.apache.tomcat.websocket.server.WsSci#init(jakarta.servlet.ServletContext,boolean)
    │           │               │           │                                                                                                       │       ├── org.apache.tomcat.websocket.server.WsServerContainer#<clinit>()
    │           │               │           │                                                                                                       │       │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                                                                                                       │       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │       │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │       │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │       │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.websocket.server.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       │       └── org.apache.tomcat.websocket.WsWebSocketContainer#<clinit>()
    │           │               │           │                                                                                                       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                                                                                                       │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                       └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                           └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.websocket.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       ├── org.apache.tomcat.util.http.Rfc6265CookieProcessor#<clinit>()
    │           │               │           │                                                                                                       │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │           └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.http.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       ├── org.apache.catalina.session.ManagerBase#<clinit>()
    │           │               │           │                                                                                                       │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                                                                                                       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.session.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       ├── org.apache.catalina.util.LifecycleBase#fireLifecycleEvent(java.lang.String,java.lang.Object)
    │           │               │           │                                                                                                       │   └── org.apache.catalina.startup.Tomcat$FixContextListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)
    │           │               │           │                                                                                                       │       └── org.apache.catalina.authenticator.AuthenticatorBase#<clinit>()
    │           │               │           │                                                                                                       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                                                                                                       │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                       └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                           └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.authenticator.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       ├── org.apache.catalina.core.StandardContext#createInstanceManager()
    │           │               │           │                                                                                                       │   └── org.apache.catalina.core.DefaultInstanceManager#<init>(javax.naming.Context,java.util.Map,org.apache.catalina.Context,java.lang.ClassLoader)
    │           │               │           │                                                                                                       │       └── org.apache.catalina.core.DefaultInstanceManager#loadProperties(java.util.Set,java.lang.String,java.lang.String,org.apache.juli.logging.Log)
    │           │               │           │                                                                                                       │           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │               │           │                                                                                                       │               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/apache/catalina/core/RestrictedFilters.properties\\E"     },      {       "pattern":"\\Qorg/apache/catalina/core/RestrictedListeners.properties\\E"     },      {       "pattern":"\\Qorg/apache/catalina/core/RestrictedServlets.properties\\E"     }   ]},   "bundles":[] }
    │           │               │           │                                                                                                       ├── org.apache.catalina.webresources.StandardRoot#<clinit>()
    │           │               │           │                                                                                                       │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                                                                                                       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.webresources.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       ├── org.springframework.boot.web.embedded.tomcat.TomcatStarter#onStartup(java.util.Set,jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │   └── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext$$Lambda$593/0x0000000801079000#onStartup(jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │       └── org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#selfInitialize(jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │           └── org.springframework.boot.web.servlet.RegistrationBean#onStartup(jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │               └── org.springframework.boot.web.servlet.DynamicRegistrationBean#register(java.lang.String,jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │                   └── org.springframework.boot.web.servlet.AbstractFilterRegistrationBean#addRegistration(java.lang.String,jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │                       └── org.springframework.boot.web.servlet.AbstractFilterRegistrationBean#addRegistration(java.lang.String,jakarta.servlet.ServletContext)
    │           │               │           │                                                                                                       │                           └── org.apache.catalina.core.ApplicationContextFacade#addFilter(java.lang.String,jakarta.servlet.Filter)
    │           │               │           │                                                                                                       │                               └── org.apache.catalina.core.ApplicationContext#addFilter(java.lang.String,jakarta.servlet.Filter)
    │           │               │           │                                                                                                       │                                   └── org.apache.catalina.core.ApplicationContext#addFilter(java.lang.String,java.lang.String,jakarta.servlet.Filter)
    │           │               │           │                                                                                                       │                                       └── org.apache.tomcat.util.descriptor.web.FilterDef#<clinit>()
    │           │               │           │                                                                                                       │                                           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                       │                                               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                                                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                                                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                       │                                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                       │                                                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.descriptor.web.LocalStrings",       "locales":[""]     }] }
    │           │               │           │                                                                                                       └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │           │                                                                                                           └── org.apache.catalina.loader.WebappLoader#startInternal()
    │           │               │           │                                                                                                               └── org.apache.catalina.loader.WebappLoader#setClassPath()
    │           │               │           │                                                                                                                   └── org.apache.catalina.core.ApplicationContextFacade#setAttribute(java.lang.String,java.lang.Object)
    │           │               │           │                                                                                                                       └── org.apache.catalina.security.SecurityUtil#<clinit>()
    │           │               │           │                                                                                                                           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                                                                                                                               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                                                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                                                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                                                                                                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                                                                                                                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.security.LocalStrings",       "locales":[""]     }] }
    │           │               │           ├── org.apache.catalina.startup.Tomcat#getService()
    │           │               │           │   └── org.apache.catalina.startup.Tomcat#getServer()
    │           │               │           │       ├── org.apache.catalina.core.StandardService#<init>()
    │           │               │           │       │   └── org.apache.catalina.mapper.Mapper#<clinit>()
    │           │               │           │       │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │       │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │       │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │       │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │       │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │       │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │       │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │       │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.mapper.LocalStrings",       "locales":[""]     }] }
    │           │               │           │       └── org.apache.catalina.core.StandardServer#<init>()
    │           │               │           │           └── org.apache.catalina.deploy.NamingResourcesImpl#<clinit>()
    │           │               │           │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │           │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │           │                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │           │                           └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │           │                               └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │           │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │           │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │           │                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.catalina.deploy.LocalStrings",       "locales":[""]     }] }
    │           │               │           └── org.apache.catalina.connector.Connector#<init>(java.lang.String)
    │           │               │               ├── org.apache.coyote.ProtocolHandler#create(java.lang.String)
    │           │               │               │   ├── org.apache.coyote.http11.Http11NioProtocol#<init>()
    │           │               │               │   │   └── org.apache.tomcat.util.net.AbstractEndpoint#<clinit>()
    │           │               │               │   │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │               │   │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │               │   │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │               │   │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │               │   │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │               │   │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │               │   │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │               │   │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.net.LocalStrings",       "locales":[""]     }] }
    │           │               │               │   ├── org.apache.coyote.AbstractProtocol#<clinit>()
    │           │               │               │   │   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │               │   │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │               │   │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │               │   │               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │               │   │                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │               │   │                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │               │   │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │               │   │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.coyote.LocalStrings",       "locales":[""]     }] }
    │           │               │               │   └── org.apache.coyote.http11.AbstractHttp11Protocol#<clinit>()
    │           │               │               │       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │               │           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │               │               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │               │                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │               │                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │               │                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │               │                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │               │                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.coyote.http11.LocalStrings",       "locales":[""]     }] }
    │           │               │               └── org.apache.tomcat.util.buf.EncodedSolidusHandling#<clinit>()
    │           │               │                   └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │                           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │                               └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │                                   └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │                                       └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.buf.LocalStrings",       "locales":[""]     }] }
    │           │               ├── org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    │           │               │   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons()
    │           │               │       └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │           └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │               └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │                   └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │                       └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                           └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                               └── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                   └── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                       └── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                           └── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                               └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                   └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │                                                                       └── org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration#requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)
    │           │               │                                                                           └── org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#requestMappingHandlerAdapter(org.springframework.web.accept.ContentNegotiationManager,org.springframework.format.support.FormattingConversionService,org.springframework.validation.Validator)
    │           │               │                                                                               └── org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#getMessageConverters()
    │           │               │                                                                                   └── org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration#configureMessageConverters(java.util.List)
    │           │               │                                                                                       └── org.springframework.web.servlet.config.annotation.WebMvcConfigurerComposite#configureMessageConverters(java.util.List)
    │           │               │                                                                                           └── org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter#configureMessageConverters(java.util.List)
    │           │               │                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider#ifAvailable(java.util.function.Consumer)
    │           │               │                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider#getIfAvailable()
    │           │               │                                                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                           └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │                                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │                                                                                                                       └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                                                                                                                           └── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                                                                                                                               └── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                   └── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                       └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                           └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                               └── org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration#messageConverters(org.springframework.beans.factory.ObjectProvider)
    │           │               │                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider#orderedStream()
    │           │               │                                                                                                                                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory$DependencyObjectProvider#resolveStream(boolean)
    │           │               │                                                                                                                                                                                           └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)
    │           │               │                                                                                                                                                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory#addCandidateEntry(java.util.Map,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class)
    │           │               │                                                                                                                                                                                                           └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveMultipleBeans(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.DefaultListableBeanFactory#findAutowireCandidates(java.lang.String,java.lang.Class,org.springframework.beans.factory.config.DependencyDescriptor)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.DefaultListableBeanFactory#addCandidateEntry(java.util.Map,java.lang.String,org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                       └── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                           └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration#standardJacksonObjectMapperBuilderCustomizer(org.springframework.boot.autoconfigure.jackson.JacksonProperties,org.springframework.beans.factory.ObjectProvider)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └── java.util.stream.ReferencePipeline#toList()
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └── java.util.stream.ReferencePipeline#toArray()
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── java.util.stream.ReferencePipeline#toArray(java.util.function.IntFunction)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── java.util.stream.AbstractPipeline#evaluateToArrayNode(java.util.function.IntFunction)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └── java.util.stream.AbstractPipeline#evaluate(java.util.Spliterator,boolean,java.util.function.IntFunction)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └── java.util.stream.AbstractPipeline#wrapAndCopyInto(java.util.stream.Sink,java.util.Spliterator)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── java.util.stream.AbstractPipeline#copyInto(java.util.stream.Sink,java.util.Spliterator)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── java.util.Spliterators$IteratorSpliterator#forEachRemaining(java.util.function.Consumer)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └── java.util.Iterator#forEachRemaining(java.util.function.Consumer)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └── java.util.stream.ReferencePipeline$3$1#accept(java.lang.Object)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.DefaultListableBeanFactory$$Lambda$465/0x00000008010564d0#apply(java.lang.Object)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.beans.factory.support.DefaultListableBeanFactory#lambda$resolveMultipleBeans$9(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.Class,java.lang.String)
    │           │               │└── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │└── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.ConstructorResolver#createArgumentArray(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.BeanWrapper,java.lang.Class[],java.lang.String[],java.lang.reflect.Executable,boolean,boolean)
    │           │               │└── org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument(org.springframework.core.MethodParameter,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter,boolean)
    │           │               │└── org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │└── org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)
    │           │               │└── org.springframework.beans.factory.config.DependencyDescriptor#resolveCandidate(java.lang.String,java.lang.Class,org.springframework.beans.factory.BeanFactory)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean(java.lang.String,java.lang.Class,java.lang.Object[],boolean)
    │           │               │└── org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String,org.springframework.beans.factory.ObjectFactory)
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory$$Lambda$374/0x0000000800faf660#getObject()
    │           │               │└── org.springframework.beans.factory.support.AbstractBeanFactory#lambda$doGetBean$0(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               └── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           └── org.springframework.beans.factory.support.ConstructorResolver#instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.ConstructorResolver#instantiate(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │└── org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
    │           │               │└── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])
    │           │               │└── jdk.internal.reflect.DelegatingMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │└── jdk.internal.reflect.NativeMethodAccessorImpl#invoke(java.lang.Object,java.lang.Object[])
    │           │               │└── jdk.internal.reflect.NativeMethodAccessorImpl#invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       └── org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration#jsonMixinModuleEntries(org.springframework.context.ApplicationContext)
    │           │               │└── org.springframework.boot.jackson.JsonMixinModuleEntries#scan(org.springframework.context.ApplicationContext,java.util.Collection)
    │           │               │└── org.springframework.boot.jackson.JsonMixinModuleEntries#create(java.util.function.Consumer)
    │           │               │└── org.springframework.boot.jackson.JsonMixinModuleEntries$$Lambda$645/0x00000008010d4400#accept(java.lang.Object)
    │           │               │└── org.springframework.boot.jackson.JsonMixinModuleEntries#lambda$scan$0(java.util.Collection,org.springframework.context.ApplicationContext,org.springframework.boot.jackson.JsonMixinModuleEntries$Builder)
    │           │               │└── org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider#findCandidateComponents(java.lang.String)
    │           │               │└── org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider#scanCandidateComponents(java.lang.String)
    │           │               │                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   └── org.springframework.context.support.GenericApplicationContext#getResources(java.lang.String)
    │           │               │└── org.springframework.context.support.AbstractApplicationContext#getResources(java.lang.String)
    │           │               │└── org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(java.lang.String)
    │           │               │└── org.springframework.core.io.support.PathMatchingResourcePatternResolver#findPathMatchingResources(java.lang.String)
    │           │               │└── org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(java.lang.String)
    │           │               │└── org.springframework.core.io.support.PathMatchingResourcePatternResolver#findAllClassPathResources(java.lang.String)
    │           │               │└── org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindAllClassPathResources(java.lang.String)
    │           │               │└── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qindi/yuluo/graalvm/\\E"     }]},   "bundles":[] }
    │           │               ├── org.springframework.context.support.AbstractApplicationContext#finishRefresh()
    │           │               │   └── org.springframework.context.support.DefaultLifecycleProcessor#onRefresh()
    │           │               │       └── org.springframework.context.support.DefaultLifecycleProcessor#startBeans(boolean)
    │           │               │           └── java.lang.Iterable#forEach(java.util.function.Consumer)
    │           │               │               └── org.springframework.context.support.DefaultLifecycleProcessor$$Lambda$711/0x0000000801113708#accept(java.lang.Object)
    │           │               │                   └── org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup#start()
    │           │               │                       └── org.springframework.context.support.DefaultLifecycleProcessor#doStart(java.util.Map,java.lang.String,boolean)
    │           │               │                           └── org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle#start()
    │           │               │                               └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#start()
    │           │               │                                   └── org.springframework.boot.web.embedded.tomcat.TomcatWebServer#addPreviouslyRemovedConnectors()
    │           │               │                                       └── org.apache.catalina.core.StandardService#addConnector(org.apache.catalina.connector.Connector)
    │           │               │                                           └── org.apache.catalina.util.LifecycleBase#start()
    │           │               │                                               └── org.apache.catalina.connector.Connector#startInternal()
    │           │               │                                                   └── org.apache.coyote.AbstractProtocol#start()
    │           │               │                                                       └── org.apache.tomcat.util.net.AbstractEndpoint#start()
    │           │               │                                                           └── org.apache.tomcat.util.net.NioEndpoint#startInternal()
    │           │               │                                                               └── org.apache.tomcat.util.net.AbstractEndpoint#createExecutor()
    │           │               │                                                                   └── org.apache.tomcat.util.threads.TaskQueue#<clinit>()
    │           │               │                                                                       └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.Class)
    │           │               │                                                                           └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String)
    │           │               │                                                                               └── org.apache.tomcat.util.res.StringManager#getManager(java.lang.String,java.util.Locale)
    │           │               │                                                                                   └── org.apache.tomcat.util.res.StringManager#<init>(java.lang.String,java.util.Locale)
    │           │               │                                                                                       └── java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
    │           │               │                                                                                           └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.util.ResourceBundle$Control)
    │           │               │                                                                                               └── java.util.ResourceBundle#getBundleImpl(java.lang.String,java.util.Locale,java.lang.Class,java.lang.ClassLoader,java.util.ResourceBundle$Control)
    │           │               │                                                                                                   └── java.util.ResourceBundle#getBundleImpl(java.lang.Module,java.lang.Module,java.lang.String,java.util.Locale,java.util.ResourceBundle$Control) - {   "resources":{   "includes":[]},   "bundles":[{       "name":"org.apache.tomcat.util.threads.LocalStrings",       "locales":[""]     }] }
    │           │               └── org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)
    │           │                   └── org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory,java.util.List)
    │           │                       └── org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanDefinitionRegistryPostProcessors(java.util.Collection,org.springframework.beans.factory.support.BeanDefinitionRegistry,org.springframework.core.metrics.ApplicationStartup)
    │           │                           └── org.springframework.context.annotation.ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    │           │                               └── org.springframework.context.annotation.ConfigurationClassPostProcessor#processConfigBeanDefinitions(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    │           │                                   ├── org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitions(java.util.Set)
    │           │                                   │   └── org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader$TrackedConditionEvaluator)
    │           │                                   │       └── org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForBeanMethod(org.springframework.context.annotation.BeanMethod)
    │           │                                   │           └── org.springframework.context.annotation.ConditionEvaluator#shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)
    │           │                                   │               └── org.springframework.boot.autoconfigure.condition.SpringBootCondition#matches(org.springframework.context.annotation.ConditionContext,org.springframework.core.type.AnnotatedTypeMetadata)
    │           │                                   │                   └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition#getMatchOutcome(org.springframework.context.annotation.ConditionContext,org.springframework.core.type.AnnotatedTypeMetadata)
    │           │                                   │                       └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#<init>(org.springframework.context.annotation.ConditionContext,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase,java.lang.String)
    │           │                                   │                           ├── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMemberConditions(java.lang.String[],org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase,java.lang.String)
    │           │                                   │                           │   └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMetadata(java.lang.String)
    │           │                                   │                           │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                   │                           │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                   │                           │               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                   │                           │                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                   │                           │                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                   │                           │                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                   │                           │                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapDisabled$OnBootstrapDisabledCondition$OnBootstrapEnabled.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapDisabled$OnBootstrapDisabledCondition$OnBootstrapMarkerClassPresent.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapDisabled$OnBootstrapDisabledCondition$OnUseLegacyProcessingEnabled.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapEnabled$OnBootstrapEnabledCondition$OnBootstrapEnabled.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapEnabled$OnBootstrapEnabledCondition$OnBootstrapMarkerClassPresent.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapEnabled$OnBootstrapEnabledCondition$OnUseLegacyProcessingEnabled.class\\E"     }   ]},   "bundles":[] }
    │           │                                   │                           └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMetadata(java.lang.String)
    │           │                                   │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                   │                                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                   │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                   │                                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                   │                                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                   │                                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                   │                                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapDisabled$OnBootstrapDisabledCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/util/ConditionalOnBootstrapEnabled$OnBootstrapEnabledCondition.class\\E"     }   ]},   "bundles":[] }
    │           │                                   └── org.springframework.context.annotation.ConfigurationClassParser#parse(java.util.Set)
    │           │                                       ├── org.springframework.context.annotation.ConfigurationClassParser#parse(org.springframework.core.type.AnnotationMetadata,java.lang.String)
    │           │                                       │   └── org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass(org.springframework.context.annotation.ConfigurationClass,java.util.function.Predicate)
    │           │                                       │       └── org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                       │           └── org.springframework.context.annotation.ComponentScanAnnotationParser#parse(org.springframework.core.annotation.AnnotationAttributes,java.lang.String)
    │           │                                       │               └── org.springframework.context.annotation.ClassPathBeanDefinitionScanner#doScan(java.lang.String[])
    │           │                                       │                   └── org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider#findCandidateComponents(java.lang.String)
    │           │                                       │                       └── org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider#scanCandidateComponents(java.lang.String)
    │           │                                       │                           └── org.springframework.context.support.GenericApplicationContext#getResources(java.lang.String)
    │           │                                       │                               └── org.springframework.context.support.AbstractApplicationContext#getResources(java.lang.String)
    │           │                                       │                                   └── org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(java.lang.String)
    │           │                                       │                                       └── org.springframework.core.io.support.PathMatchingResourcePatternResolver#findPathMatchingResources(java.lang.String)
    │           │                                       │                                           └── org.springframework.core.io.support.PathMatchingResourcePatternResolver#getResources(java.lang.String)
    │           │                                       │                                               └── org.springframework.core.io.support.PathMatchingResourcePatternResolver#findAllClassPathResources(java.lang.String)
    │           │                                       │                                                   └── org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindAllClassPathResources(java.lang.String)
    │           │                                       │                                                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qindi/yuluo/graalvm/\\E"     }]},   "bundles":[] }
    │           │                                       └── org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorHandler#process()
    │           │                                           └── org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler#processGroupImports()
    │           │                                               ├── org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGrouping#getImports()
    │           │                                               │   ├── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup#selectImports()
    │           │                                               │   │   ├── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup#getAutoConfigurationMetadata()
    │           │                                               │   │   │   └── org.springframework.boot.autoconfigure.AutoConfigurationMetadataLoader#loadMetadata(java.lang.ClassLoader)
    │           │                                               │   │   │       └── org.springframework.boot.autoconfigure.AutoConfigurationMetadataLoader#loadMetadata(java.lang.ClassLoader,java.lang.String)
    │           │                                               │   │   │           └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/spring-autoconfigure-metadata.properties\\E"     }]},   "bundles":[] }
    │           │                                               │   │   └── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup#sortAutoConfigurations(java.util.Set,org.springframework.boot.autoconfigure.AutoConfigurationMetadata)
    │           │                                               │   │       └── org.springframework.boot.autoconfigure.AutoConfigurationSorter#getInPriorityOrder(java.util.Collection)
    │           │                                               │   │           └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClasses#<init>(org.springframework.core.type.classreading.MetadataReaderFactory,org.springframework.boot.autoconfigure.AutoConfigurationMetadata,java.util.Collection)
    │           │                                               │   │               └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClasses#addToClasses(org.springframework.core.type.classreading.MetadataReaderFactory,org.springframework.boot.autoconfigure.AutoConfigurationMetadata,java.util.Collection,boolean)
    │           │                                               │   │                   ├── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClasses#addToClasses(org.springframework.core.type.classreading.MetadataReaderFactory,org.springframework.boot.autoconfigure.AutoConfigurationMetadata,java.util.Collection,boolean)
    │           │                                               │   │                   │   └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass#isAvailable()
    │           │                                               │   │                   │       └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass#getAnnotationMetadata()
    │           │                                               │   │                   │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                               │   │                   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                   │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                               │   │                   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                               │   │                   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                               │   │                   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                               │   │                   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/cloud/client/discovery/simple/SimpleDiscoveryClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/config/CommonsConfigAutoConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                               │   │                   └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass#isAvailable()
    │           │                                               │   │                       └── org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClass#getAnnotationMetadata()
    │           │                                               │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                               │   │                               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                               │   │                                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                               │   │                                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                               │   │                                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                               │   │                                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                               │   │                                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qcom/alibaba/cloud/nacos/NacosConfigAutoConfiguration.class\\E"     },      {       "pattern":"\\Qcom/alibaba/cloud/nacos/endpoint/NacosConfigEndpointAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/CommonsClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/ReactiveCommonsClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/discovery/composite/CompositeDiscoveryClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/discovery/composite/reactive/ReactiveCompositeDiscoveryClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/discovery/simple/reactive/SimpleReactiveDiscoveryClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/hypermedia/CloudHypermediaAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerDefaultMappingsProviderAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/reactive/LoadBalancerBeanPostProcessorAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/reactive/ReactorLoadBalancerClientAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/serviceregistry/AutoServiceRegistrationAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/serviceregistry/ServiceRegistryAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/security/ResourceServerTokenRelayAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/util/UtilAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/configuration/CompatibilityVerifierAutoConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                               │   └── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationGroup#process(org.springframework.core.type.AnnotationMetadata,org.springframework.context.annotation.DeferredImportSelector)
    │           │                                               │       └── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getAutoConfigurationEntry(org.springframework.core.type.AnnotationMetadata)
    │           │                                               │           ├── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getCandidateConfigurations(org.springframework.core.type.AnnotationMetadata,org.springframework.core.annotation.AnnotationAttributes)
    │           │                                               │           │   └── org.springframework.boot.context.annotation.ImportCandidates#load(java.lang.Class,java.lang.ClassLoader)
    │           │                                               │           │       └── org.springframework.boot.context.annotation.ImportCandidates#findUrlsInClasspath(java.lang.ClassLoader,java.lang.String)
    │           │                                               │           │           └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports\\E"     }]},   "bundles":[] }
    │           │                                               │           └── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getConfigurationClassFilter()
    │           │                                               │               └── org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$ConfigurationClassFilter#<init>(java.lang.ClassLoader,java.util.List)
    │           │                                               │                   └── org.springframework.boot.autoconfigure.AutoConfigurationMetadataLoader#loadMetadata(java.lang.ClassLoader)
    │           │                                               │                       └── org.springframework.boot.autoconfigure.AutoConfigurationMetadataLoader#loadMetadata(java.lang.ClassLoader,java.lang.String)
    │           │                                               │                           └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/spring-autoconfigure-metadata.properties\\E"     }]},   "bundles":[] }
    │           │                                               └── java.lang.Iterable#forEach(java.util.function.Consumer)
    │           │                                                   └── org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler$$Lambda$415/0x0000000800fd69c8#accept(java.lang.Object)
    │           │                                                       └── org.springframework.context.annotation.ConfigurationClassParser$DeferredImportSelectorGroupingHandler#lambda$processGroupImports$1(java.util.function.Predicate,org.springframework.context.annotation.DeferredImportSelector$Group$Entry)
    │           │                                                           ├── org.springframework.context.annotation.ConfigurationClassParser#processImports(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Collection,java.util.function.Predicate,boolean)
    │           │                                                           │   ├── org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass(org.springframework.context.annotation.ConfigurationClass,java.util.function.Predicate)
    │           │                                                           │   │   ├── org.springframework.context.annotation.ConditionEvaluator#shouldSkip(org.springframework.core.type.AnnotatedTypeMetadata,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase)
    │           │                                                           │   │   │   └── org.springframework.boot.autoconfigure.condition.SpringBootCondition#matches(org.springframework.context.annotation.ConditionContext,org.springframework.core.type.AnnotatedTypeMetadata)
    │           │                                                           │   │   │       └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition#getMatchOutcome(org.springframework.context.annotation.ConditionContext,org.springframework.core.type.AnnotatedTypeMetadata)
    │           │                                                           │   │   │           └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#<init>(org.springframework.context.annotation.ConditionContext,org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase,java.lang.String)
    │           │                                                           │   │   │               ├── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMemberConditions(java.lang.String[],org.springframework.context.annotation.ConfigurationCondition$ConfigurationPhase,java.lang.String)
    │           │                                                           │   │   │               │   └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMetadata(java.lang.String)
    │           │                                                           │   │   │               │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │   │               │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │   │               │               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │   │               │                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │   │               │                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │   │               │                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │   │               │                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration$SqlInitializationModeCondition$ModeIsNever.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition$ReactiveWebApplication.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │   │               └── org.springframework.boot.autoconfigure.condition.AbstractNestedCondition$MemberConditions#getMetadata(java.lang.String)
    │           │                                                           │   │   │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration$SqlInitializationModeCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │   └── org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │       ├── org.springframework.context.annotation.ConfigurationClassParser#processImports(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Collection,java.util.function.Predicate,boolean)
    │           │                                                           │   │       │   ├── org.springframework.context.annotation.ConfigurationClassParser#asSourceClasses(java.lang.String[],java.util.function.Predicate)
    │           │                                                           │   │       │   │   └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │   │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │   │           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │   │                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │   │                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/GenericCacheConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/NoOpCacheConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/SimpleCacheConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       │   ├── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#isAssignable(java.lang.Class)
    │           │                                                           │   │       │   │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │       └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │           ├── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │           │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │           │       ├── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │           │       │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │       │   │           │       │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │   │           │       │           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │       │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │       │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │   │           │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │       │                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │   │           │       │                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │   │           │       │                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/core/Ordered.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │       │   │           │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │   │           │           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │   │           │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │           │                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │   │           │                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │   │           │                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/beans/factory/Aware.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/AbstractDependsOnBeanFactoryPostProcessor.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       │   │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/beans/factory/BeanFactoryAware.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/orm/jpa/EntityManagerFactoryDependsOnPostProcessor.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/annotation/ImportBeanDefinitionRegistrar.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       │   └── org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass(org.springframework.context.annotation.ConfigurationClass,java.util.function.Predicate)
    │           │                                                           │   │       │       └── org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │       │           ├── org.springframework.context.annotation.ConfigurationClassParser#getImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass)
    │           │                                                           │   │       │           │   └── org.springframework.context.annotation.ConfigurationClassParser#collectImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Set,java.util.Set)
    │           │                                                           │   │       │           │       └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotations()
    │           │                                                           │   │       │           │           └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │       │           │               └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │           │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │           │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │           │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │           │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │           │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │           │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │           │                                           └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │           │                                               └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │           │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │       │           └── org.springframework.context.annotation.ConfigurationClassParser#processMemberClasses(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │       │               └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getMemberClasses()
    │           │                                                           │   │       │                   └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │                                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │                                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │                                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       ├── org.springframework.context.annotation.ConfigurationClassParser#getImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass)
    │           │                                                           │   │       │   └── org.springframework.context.annotation.ConfigurationClassParser#collectImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Set,java.util.Set)
    │           │                                                           │   │       │       ├── org.springframework.context.annotation.ConfigurationClassParser#collectImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Set,java.util.Set)
    │           │                                                           │   │       │       │   ├── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotations()
    │           │                                                           │   │       │       │   │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │       │       │   │       └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │       │   │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │       │   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │   │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │       │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │       │   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │       │   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/AutoConfigureAfter.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/AutoConfigureBefore.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/annotation/Configuration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       │       │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotationAttributes(java.lang.String,java.lang.String)
    │           │                                                           │   │       │       │       └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │       │       │           └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │       │               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │       │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │       │                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │       │                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/boot/context/properties/EnableConfigurationPropertiesRegistrar.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │       │       ├── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotations()
    │           │                                                           │   │       │       │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │       │       │       └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │       │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │       │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │       │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │       │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │       │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/AutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/AutoConfigureOrder.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnBean.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnWebApplication.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/context/properties/EnableConfigurationProperties.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/annotation/Import.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/annotation/ImportRuntimeHints.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       │       └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotationAttributes(java.lang.String,java.lang.String)
    │           │                                                           │   │       │           └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │       │               └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │       │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │       │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │       │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │       │                                           └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │       │                                               └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │       │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/GsonHttpMessageConvertersConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/JacksonHttpMessageConvertersConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/JsonbHttpMessageConvertersConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/R2dbcInitializationConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration$EmbeddedJetty.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration$EmbeddedTomcat.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryConfiguration$EmbeddedUndertow.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/sql/init/dependency/DatabaseInitializationDependencyConfigurer.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/serviceregistry/AutoServiceRegistrationConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │       └── org.springframework.context.annotation.ConfigurationClassParser#processMemberClasses(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │           ├── org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass(org.springframework.context.annotation.ConfigurationClass,java.util.function.Predicate)
    │           │                                                           │   │           │   └── org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │           │       ├── org.springframework.context.annotation.ConfigurationClassParser#processImports(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Collection,java.util.function.Predicate,boolean)
    │           │                                                           │   │           │       │   ├── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#isAssignable(java.lang.Class)
    │           │                                                           │   │           │       │   │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │       └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │           ├── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │           │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │           │       ├── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │           │       │   └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │   │           │       │   │           │       │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │   │           │       │           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │       │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │       │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │   │           │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │       │                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │   │           │       │                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │   │           │       │                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/context/ApplicationContextAware.class\\E"     },      {       "pattern":"\\Qorg/springframework/web/context/ServletContextAware.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │           │       │   │           │       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │   │           │           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │   │           │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │           │                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │   │           │                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │   │           │                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │           │       │   │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/context/ResourceLoaderAware.class\\E"     },      {       "pattern":"\\Qorg/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │           │       │   └── org.springframework.context.annotation.ConfigurationClassParser#processConfigurationClass(org.springframework.context.annotation.ConfigurationClass,java.util.function.Predicate)
    │           │                                                           │   │           │       │       └── org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │           │       │           └── org.springframework.context.annotation.ConfigurationClassParser#processMemberClasses(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │           │       │               └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getMemberClasses()
    │           │                                                           │   │           │       │                   └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │                                           └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                               └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │                                                   └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │                                                       └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport$NoOpValidator.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │           │       ├── org.springframework.context.annotation.ConfigurationClassParser#processInterfaces(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass)
    │           │                                                           │   │           │       │   ├── org.springframework.context.annotation.ConfigurationClassParser#processInterfaces(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass)
    │           │                                                           │   │           │       │   │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getInterfaces()
    │           │                                                           │   │           │       │   │       └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │       │   │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │   │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │   │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │   │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │   │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/beans/factory/config/BeanFactoryPostProcessor.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │           │       │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getInterfaces()
    │           │                                                           │   │           │       │       └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │       │           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │               └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                       └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/beans/factory/support/BeanDefinitionRegistryPostProcessor.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/EnvironmentAware.class\\E"     },      {       "pattern":"\\Qorg/springframework/web/servlet/config/annotation/WebMvcConfigurer.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │           │       ├── org.springframework.context.annotation.ConfigurationClassParser#getImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass)
    │           │                                                           │   │           │       │   └── org.springframework.context.annotation.ConfigurationClassParser#collectImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Set,java.util.Set)
    │           │                                                           │   │           │       │       ├── org.springframework.context.annotation.ConfigurationClassParser#collectImports(org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.Set,java.util.Set)
    │           │                                                           │   │           │       │       │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotations()
    │           │                                                           │   │           │       │       │       └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │           │       │       │           └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │       │       │               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │       │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │       │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │       │                           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │       │                                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │       │                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │       │                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/context/annotation/Conditional.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │           │       │       └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getAnnotations()
    │           │                                                           │   │           │       │           └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getRelated(java.lang.String)
    │           │                                                           │   │           │       │               └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │       │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │       │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │       │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │       │                                           └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │       │                                               └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │       │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnClass.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnMissingClass.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/condition/ConditionalOnProperty.class\\E"     },      {       "pattern":"\\Qorg/springframework/core/annotation/Order.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   │           │       └── org.springframework.context.annotation.ConfigurationClassParser#processMemberClasses(org.springframework.context.annotation.ConfigurationClass,org.springframework.context.annotation.ConfigurationClassParser$SourceClass,java.util.function.Predicate)
    │           │                                                           │   │           │           └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getMemberClasses()
    │           │                                                           │   │           │               └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │           │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │           │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │           │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │           │                                           └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │           │                                               └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │           │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer.class\\E"     }]},   "bundles":[] }
    │           │                                                           │   │           └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#getMemberClasses()
    │           │                                                           │   │               └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                           │   │                   └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │   │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │                           └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │   │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │   │                                       └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │   │                                           └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │   │                                               └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │   │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/aop/AopAutoConfiguration$AspectJAutoProxyingConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/aop/AopAutoConfiguration$ClassProxyingConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/CacheAutoConfiguration$CacheConfigurationImportSelector.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/CacheAutoConfiguration$CacheManagerEntityManagerFactoryDependsOnPostProcessor.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/CacheAutoConfiguration$CacheManagerValidator.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration$HttpMessageConvertersAutoConfigurationRuntimeHints.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration$NotReactiveWebApplicationCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration$GitResourceAvailableCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonAutoConfigurationRuntimeHints.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonMixinConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$ParameterNamesModuleConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration$SqlInitializationModeCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration$NotReactiveWebApplicationCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration$JettyWebServerFactoryCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration$UndertowWebServerFactoryCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration$DefaultDispatcherServletCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration$DispatcherServletConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration$DispatcherServletRegistrationCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration$BeanPostProcessorsRegistrar.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration$ForwardedHeaderFilterConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration$ForwardedHeaderFilterCustomizer.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$OptionalPathExtensionContentNegotiationStrategy.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$ProblemDetailsErrorHandlingConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$ResourceChainCustomizerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$ResourceChainResourceHandlerRegistrationCustomizer.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$ResourceHandlerRegistrationCustomizer.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$ErrorPageCustomizer.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$ErrorTemplateMissingCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$StaticView.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration$JettyWebSocketConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration$UndertowWebSocketConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/RefreshAutoConfiguration$JpaInvokerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/RefreshAutoConfiguration$RefreshProperties.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/CommonsClientAutoConfiguration$ActuatorConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/ReactiveCommonsClientAutoConfiguration$ReactiveDiscoveryLoadBalancerConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration$RetryAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration$RetryInterceptorAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration$RetryMissingOrDisabledCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/client/serviceregistry/ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/security/ResourceServerTokenRelayAutoConfiguration$ConditionalOnOAuth2ClientInResourceServer.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/security/ResourceServerTokenRelayAutoConfiguration$OAuth2OnClientInResourceServerCondition.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/commons/security/ResourceServerTokenRelayAutoConfiguration$ResourceServerTokenRelayRegistrationAutoConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           │   └── org.springframework.context.annotation.ConfigurationClassParser$SourceClass#isAssignable(java.lang.Class)
    │           │                                                           │       └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │           └── org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter#match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)
    │           │                                                           │               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                           │                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │                           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                           │                               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                           │                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                           │                                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                           │                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                           │                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/beans/factory/InitializingBean.class\\E"     },      {       "pattern":"\\Qorg/springframework/beans/factory/SmartInitializingSingleton.class\\E"     },      {       "pattern":"\\Qorg/springframework/context/ApplicationListener.class\\E"     }   ]},   "bundles":[] }
    │           │                                                           └── org.springframework.context.annotation.ConfigurationClassParser#asSourceClass(java.lang.String,java.util.function.Predicate)
    │           │                                                               └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(java.lang.String)
    │           │                                                                   └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                                       └── org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory#createMetadataReader(org.springframework.core.io.Resource)
    │           │                                                                           └── org.springframework.core.type.classreading.SimpleMetadataReaderFactory#getMetadataReader(org.springframework.core.io.Resource)
    │           │                                                                               └── org.springframework.core.type.classreading.SimpleMetadataReader#<init>(org.springframework.core.io.Resource,java.lang.ClassLoader)
    │           │                                                                                   └── org.springframework.core.type.classreading.SimpleMetadataReader#getClassReader(org.springframework.core.io.Resource)
    │           │                                                                                       └── org.springframework.core.io.ClassPathResource#getInputStream()
    │           │                                                                                           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │           │                                                                                               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[     {       "pattern":"\\Qorg/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/aop/AopAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/availability/ApplicationAvailabilityAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/context/ConfigurationPropertiesAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/context/LifecycleAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/context/PropertyPlaceholderAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/http/HttpMessageConvertersAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/info/ProjectInfoAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/sql/init/SqlInitializationAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/HttpEncodingAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/MultipartAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/ConfigurationPropertiesRebinderAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/LifecycleMvcEndpointAutoConfiguration.class\\E"     },      {       "pattern":"\\Qorg/springframework/cloud/autoconfigure/RefreshAutoConfiguration.class\\E"     }   ]},   "bundles":[] }
    │           └── org.springframework.boot.SpringApplication#prepareEnvironment(org.springframework.boot.SpringApplicationRunListeners,org.springframework.boot.DefaultBootstrapContext,org.springframework.boot.ApplicationArguments)
    │               └── org.springframework.boot.SpringApplicationRunListeners#environmentPrepared(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment)
    │                   └── org.springframework.boot.SpringApplicationRunListeners#doWithListeners(java.lang.String,java.util.function.Consumer)
    │                       └── org.springframework.boot.SpringApplicationRunListeners#doWithListeners(java.lang.String,java.util.function.Consumer,java.util.function.Consumer)
    │                           └── java.lang.Iterable#forEach(java.util.function.Consumer)
    │                               └── org.springframework.boot.SpringApplicationRunListeners$$Lambda$91/0x0000000800ca5dc8#accept(java.lang.Object)
    │                                   └── org.springframework.boot.SpringApplicationRunListeners#lambda$environmentPrepared$2(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment,org.springframework.boot.SpringApplicationRunListener)
    │                                       └── org.springframework.boot.context.event.EventPublishingRunListener#environmentPrepared(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment)
    │                                           └── org.springframework.boot.context.event.EventPublishingRunListener#multicastInitialEvent(org.springframework.context.ApplicationEvent)
    │                                               └── org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent)
    │                                                   └── org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType)
    │                                                       └── org.springframework.context.event.SimpleApplicationEventMulticaster#invokeListener(org.springframework.context.ApplicationListener,org.springframework.context.ApplicationEvent)
    │                                                           └── org.springframework.context.event.SimpleApplicationEventMulticaster#doInvokeListener(org.springframework.context.ApplicationListener,org.springframework.context.ApplicationEvent)
    │                                                               └── org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEvent(org.springframework.context.ApplicationEvent)
    │                                                                   └── org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEnvironmentPreparedEvent(org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent)
    │                                                                       └── org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment(org.springframework.core.env.ConfigurableEnvironment,org.springframework.boot.SpringApplication)
    │                                                                           └── org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment(org.springframework.core.env.ConfigurableEnvironment,org.springframework.core.io.ResourceLoader,java.util.Collection)
    │                                                                               └── org.springframework.boot.context.config.ConfigDataEnvironment#processAndApply()
    │                                                                                   ├── org.springframework.boot.context.config.ConfigDataEnvironment#processWithProfiles(org.springframework.boot.context.config.ConfigDataEnvironmentContributors,org.springframework.boot.context.config.ConfigDataImporter,org.springframework.boot.context.config.ConfigDataActivationContext)
    │                                                                                   │   └── org.springframework.boot.context.config.ConfigDataEnvironmentContributors#withProcessedImports(org.springframework.boot.context.config.ConfigDataImporter,org.springframework.boot.context.config.ConfigDataActivationContext)
    │                                                                                   │       └── org.springframework.boot.context.config.ConfigDataImporter#resolveAndLoad(org.springframework.boot.context.config.ConfigDataActivationContext,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLoaderContext,java.util.List)
    │                                                                                   │           ├── org.springframework.boot.context.config.ConfigDataImporter#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.Profiles,java.util.List)
    │                                                                                   │           │   └── org.springframework.boot.context.config.ConfigDataImporter#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.Profiles,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                   │           │       └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                   │           │           └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocationResolver,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                   │           │               └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocation,boolean,java.util.function.Supplier)
    │                                                                                   │           │                   ├── org.springframework.boot.context.config.ConfigDataLocationResolvers$$Lambda$207/0x0000000800d3bde0#get()
    │                                                                                   │           │                   │   └── org.springframework.boot.context.config.ConfigDataLocationResolvers#lambda$resolve$2(org.springframework.boot.context.config.ConfigDataLocationResolver,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                   │           │                   │       └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLocationResolver#resolveProfileSpecific(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                   │           │                   │           └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLocationResolver#registerConfigManager(com.alibaba.cloud.nacos.NacosConfigProperties,org.springframework.boot.ConfigurableBootstrapContext)
    │                                                                                   │           │                   │               └── com.alibaba.cloud.nacos.NacosConfigManager#<init>(com.alibaba.cloud.nacos.NacosConfigProperties)
    │                                                                                   │           │                   │                   └── com.alibaba.cloud.nacos.NacosConfigManager#createConfigService(com.alibaba.cloud.nacos.NacosConfigProperties)
    │                                                                                   │           │                   │                       └── com.alibaba.nacos.api.NacosFactory#createConfigService(java.util.Properties)
    │                                                                                   │           │                   │                           └── com.alibaba.nacos.api.config.ConfigFactory#createConfigService(java.util.Properties)
    │                                                                                   │           │                   │                               ├── java.lang.Class#forName(java.lang.String)
    │                                                                                   │           │                   │                               │   └── java.lang.Class#forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)
    │                                                                                   │           │                   │                               │       └── com.alibaba.nacos.client.config.NacosConfigService#<clinit>()
    │                                                                                   │           │                   │                               │           └── com.alibaba.nacos.client.utils.LogUtils#<clinit>()
    │                                                                                   │           │                   │                               │               └── com.alibaba.nacos.client.logging.NacosLogging#getInstance()
    │                                                                                   │           │                   │                               │                   └── com.alibaba.nacos.client.logging.NacosLogging$NacosLoggingInstance#<clinit>()
    │                                                                                   │           │                   │                               │                       └── com.alibaba.nacos.client.logging.NacosLogging#<init>(com.alibaba.nacos.client.logging.NacosLogging$1)
    │                                                                                   │           │                   │                               │                           └── com.alibaba.nacos.client.logging.NacosLogging#<init>()
    │                                                                                   │           │                   │                               │                               └── com.alibaba.nacos.client.logging.AbstractNacosLogging#<clinit>()
    │                                                                                   │           │                   │                               │                                   └── com.alibaba.nacos.client.env.NacosClientProperties#<clinit>()
    │                                                                                   │           │                   │                               │                                       └── com.alibaba.nacos.client.env.SearchableProperties#<clinit>()
    │                                                                                   │           │                   │                               │                                           └── com.alibaba.nacos.client.env.DefaultSettingPropertySource#<init>()
    │                                                                                   │           │                   │                               │                                               └── com.alibaba.nacos.common.utils.ResourceUtils#getResourceUrl(java.lang.String)
    │                                                                                   │           │                   │                               │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qnacos_default_setting.properties\\E"     }]},   "bundles":[] }
    │                                                                                   │           │                   │                               └── java.lang.reflect.Constructor#newInstance(java.lang.Object[])
    │                                                                                   │           │                   │                                   └── java.lang.reflect.Constructor#newInstanceWithCaller(java.lang.Object[],boolean,java.lang.Class)
    │                                                                                   │           │                   │                                       └── jdk.internal.reflect.DelegatingConstructorAccessorImpl#newInstance(java.lang.Object[])
    │                                                                                   │           │                   │                                           └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance(java.lang.Object[])
    │                                                                                   │           │                   │                                               └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance0(java.lang.reflect.Constructor,java.lang.Object[])
    │                                                                                   │           │                   │                                                   └── com.alibaba.nacos.client.config.NacosConfigService#<init>(java.util.Properties)
    │                                                                                   │           │                   │                                                       ├── com.alibaba.nacos.client.config.NacosConfigService#initNamespace(com.alibaba.nacos.client.env.NacosClientProperties)
    │                                                                                   │           │                   │                                                       │   └── com.alibaba.nacos.client.utils.ParamUtil#<clinit>()
    │                                                                                   │           │                   │                                                       │       └── com.alibaba.nacos.common.utils.VersionUtils#<clinit>()
    │                                                                                   │           │                   │                                                       │           └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │                                                                                   │           │                   │                                                       │               └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qnacos-version.txt\\E"     }]},   "bundles":[] }
    │                                                                                   │           │                   │                                                       ├── com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager#<init>(java.util.Properties)
    │                                                                                   │           │                   │                                                       │   └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │           │                   │                                                       │       └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │           │                   │                                                       │           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │           │                   │                                                       │               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │           │                   │                                                       │                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │           │                   │                                                       │                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.api.config.filter.IConfigFilter\\E"     }]},   "bundles":[] }
    │                                                                                   │           │                   │                                                       └── com.alibaba.nacos.client.config.impl.ClientWorker#<init>(com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager,com.alibaba.nacos.client.config.impl.ServerListManager,com.alibaba.nacos.client.env.NacosClientProperties)
    │                                                                                   │           │                   │                                                           └── com.alibaba.nacos.client.config.impl.ClientWorker$ConfigRpcTransportClient#<init>(com.alibaba.nacos.client.config.impl.ClientWorker,com.alibaba.nacos.client.env.NacosClientProperties,com.alibaba.nacos.client.config.impl.ServerListManager)
    │                                                                                   │           │                   │                                                               └── com.alibaba.nacos.client.config.impl.ConfigTransportClient#<init>(com.alibaba.nacos.client.env.NacosClientProperties,com.alibaba.nacos.client.config.impl.ServerListManager)
    │                                                                                   │           │                   │                                                                   └── com.alibaba.nacos.client.security.SecurityProxy#<init>(java.util.List,com.alibaba.nacos.common.http.client.NacosRestTemplate)
    │                                                                                   │           │                   │                                                                       └── com.alibaba.nacos.plugin.auth.spi.client.ClientAuthPluginManager#init(java.util.List,com.alibaba.nacos.common.http.client.NacosRestTemplate)
    │                                                                                   │           │                   │                                                                           └── com.alibaba.nacos.common.spi.NacosServiceLoader#load(java.lang.Class)
    │                                                                                   │           │                   │                                                                               └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │           │                   │                                                                                   └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │           │                   │                                                                                       └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │           │                   │                                                                                           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │           │                   │                                                                                               └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │           │                   │                                                                                                   └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.plugin.auth.spi.client.AbstractClientAuthService\\E"     }]},   "bundles":[] }
    │                                                                                   │           │                   └── org.springframework.boot.context.config.ConfigDataLocationResolvers$$Lambda$158/0x0000000800d0ad30#get()
    │                                                                                   │           │                       └── org.springframework.boot.context.config.ConfigDataLocationResolvers#lambda$resolve$1(org.springframework.boot.context.config.ConfigDataLocationResolver,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                   │           │                           └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                   │           │                               └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(java.util.Set)
    │                                                                                   │           │                                   └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(org.springframework.boot.context.config.StandardConfigDataReference)
    │                                                                                   │           │                                       └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolveNonPattern(org.springframework.boot.context.config.StandardConfigDataReference)
    │                                                                                   │           │                                           └── org.springframework.core.io.ClassPathResource#exists()
    │                                                                                   │           │                                               └── org.springframework.core.io.ClassPathResource#resolveURL()
    │                                                                                   │           │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qapplication.yaml\\E"     }]},   "bundles":[] }
    │                                                                                   │           └── org.springframework.boot.context.config.ConfigDataImporter#load(org.springframework.boot.context.config.ConfigDataLoaderContext,java.util.List)
    │                                                                                   │               └── org.springframework.boot.context.config.ConfigDataLoaders#load(org.springframework.boot.context.config.ConfigDataLoaderContext,org.springframework.boot.context.config.ConfigDataResource)
    │                                                                                   │                   └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader#load(org.springframework.boot.context.config.ConfigDataLoaderContext,org.springframework.boot.context.config.ConfigDataResource)
    │                                                                                   │                       └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader#load(org.springframework.boot.context.config.ConfigDataLoaderContext,com.alibaba.cloud.nacos.configdata.NacosConfigDataResource)
    │                                                                                   │                           └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader#doLoad(org.springframework.boot.context.config.ConfigDataLoaderContext,com.alibaba.cloud.nacos.configdata.NacosConfigDataResource)
    │                                                                                   │                               └── com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader#pullConfig(com.alibaba.nacos.api.config.ConfigService,java.lang.String,java.lang.String,java.lang.String,long)
    │                                                                                   │                                   └── com.alibaba.nacos.client.config.NacosConfigService#getConfig(java.lang.String,java.lang.String,long)
    │                                                                                   │                                       └── com.alibaba.nacos.client.config.NacosConfigService#getConfigInner(java.lang.String,java.lang.String,java.lang.String,long)
    │                                                                                   │                                           └── com.alibaba.nacos.client.config.impl.ClientWorker#getServerConfig(java.lang.String,java.lang.String,java.lang.String,long,boolean)
    │                                                                                   │                                               └── com.alibaba.nacos.client.config.impl.ClientWorker$ConfigRpcTransportClient#queryConfig(java.lang.String,java.lang.String,java.lang.String,long,boolean)
    │                                                                                   │                                                   └── com.alibaba.nacos.client.config.impl.ClientWorker$ConfigRpcTransportClient#getOneRunningClient()
    │                                                                                   │                                                       └── com.alibaba.nacos.client.config.impl.ClientWorker$ConfigRpcTransportClient#ensureRpcClient(java.lang.String)
    │                                                                                   │                                                           ├── com.alibaba.nacos.common.remote.client.RpcClient#start()
    │                                                                                   │                                                           │   └── com.alibaba.nacos.common.remote.client.grpc.GrpcClient#connectToServer(com.alibaba.nacos.common.remote.client.RpcClient$ServerInfo)
    │                                                                                   │                                                           │       └── com.alibaba.nacos.common.remote.client.grpc.GrpcClient#createNewManagedChannel(java.lang.String,int)
    │                                                                                   │                                                           │           ├── com.alibaba.nacos.shaded.io.grpc.ManagedChannelBuilder#forAddress(java.lang.String,int)
    │                                                                                   │                                                           │           │   ├── com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider#builderForAddress(java.lang.String,int)
    │                                                                                   │                                                           │           │   │   └── com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider#builderForAddress(java.lang.String,int)
    │                                                                                   │                                                           │           │   │       └── com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder#forAddress(java.lang.String,int)
    │                                                                                   │                                                           │           │   │           └── com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder#<init>(java.lang.String,int)
    │                                                                                   │                                                           │           │   │               └── com.alibaba.nacos.shaded.io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder#<init>(java.lang.String)
    │                                                                                   │                                                           │           │   │                   └── com.alibaba.nacos.shaded.io.grpc.internal.AbstractManagedChannelImplBuilder#<init>(java.lang.String)
    │                                                                                   │                                                           │           │   │                       └── com.alibaba.nacos.shaded.io.grpc.NameResolverRegistry#getDefaultRegistry()
    │                                                                                   │                                                           │           │   │                           └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#loadAll(java.lang.Class,java.lang.Iterable,java.lang.ClassLoader,com.alibaba.nacos.shaded.io.grpc.ServiceProviders$PriorityAccessor)
    │                                                                                   │                                                           │           │   │                               └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#getCandidatesViaServiceLoader(java.lang.Class,java.lang.ClassLoader)
    │                                                                                   │                                                           │           │   │                                   └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │                                                           │           │   │                                       └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │                                                           │           │   │                                           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │                                                           │           │   │                                               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │                                                           │           │   │                                                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │                                                           │           │   │                                                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.shaded.io.grpc.NameResolverProvider\\E"     }]},   "bundles":[] }
    │                                                                                   │                                                           │           │   └── com.alibaba.nacos.shaded.io.grpc.ManagedChannelProvider#<clinit>()
    │                                                                                   │                                                           │           │       └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#load(java.lang.Class,java.lang.Iterable,java.lang.ClassLoader,com.alibaba.nacos.shaded.io.grpc.ServiceProviders$PriorityAccessor)
    │                                                                                   │                                                           │           │           └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#loadAll(java.lang.Class,java.lang.Iterable,java.lang.ClassLoader,com.alibaba.nacos.shaded.io.grpc.ServiceProviders$PriorityAccessor)
    │                                                                                   │                                                           │           │               └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#getCandidatesViaServiceLoader(java.lang.Class,java.lang.ClassLoader)
    │                                                                                   │                                                           │           │                   └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │                                                           │           │                       └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │                                                           │           │                           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │                                                           │           │                               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │                                                           │           │                                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │                                                           │           │                                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.shaded.io.grpc.ManagedChannelProvider\\E"     }]},   "bundles":[] }
    │                                                                                   │                                                           │           └── com.alibaba.nacos.shaded.io.grpc.internal.AbstractManagedChannelImplBuilder#build()
    │                                                                                   │                                                           │               └── com.alibaba.nacos.shaded.io.grpc.internal.ManagedChannelImpl#<init>(com.alibaba.nacos.shaded.io.grpc.internal.AbstractManagedChannelImplBuilder,com.alibaba.nacos.shaded.io.grpc.internal.ClientTransportFactory,com.alibaba.nacos.shaded.io.grpc.internal.BackoffPolicy$Provider,com.alibaba.nacos.shaded.io.grpc.internal.ObjectPool,com.alibaba.nacos.shaded.com.google.common.base.Supplier,java.util.List,com.alibaba.nacos.shaded.io.grpc.internal.TimeProvider)
    │                                                                                   │                                                           │                   └── com.alibaba.nacos.shaded.io.grpc.internal.AutoConfiguredLoadBalancerFactory#<init>(java.lang.String)
    │                                                                                   │                                                           │                       └── com.alibaba.nacos.shaded.io.grpc.LoadBalancerRegistry#getDefaultRegistry()
    │                                                                                   │                                                           │                           └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#loadAll(java.lang.Class,java.lang.Iterable,java.lang.ClassLoader,com.alibaba.nacos.shaded.io.grpc.ServiceProviders$PriorityAccessor)
    │                                                                                   │                                                           │                               └── com.alibaba.nacos.shaded.io.grpc.ServiceProviders#getCandidatesViaServiceLoader(java.lang.Class,java.lang.ClassLoader)
    │                                                                                   │                                                           │                                   └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │                                                           │                                       └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │                                                           │                                           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │                                                           │                                               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │                                                           │                                                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │                                                           │                                                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.shaded.io.grpc.LoadBalancerProvider\\E"     }]},   "bundles":[] }
    │                                                                                   │                                                           └── com.alibaba.nacos.common.remote.client.RpcClientFactory#createClient(java.lang.String,com.alibaba.nacos.common.remote.ConnectionType,java.util.Map)
    │                                                                                   │                                                               └── com.alibaba.nacos.common.remote.client.RpcClientFactory#createClient(java.lang.String,com.alibaba.nacos.common.remote.ConnectionType,java.lang.Integer,java.lang.Integer,java.util.Map)
    │                                                                                   │                                                                   └── java.util.concurrent.ConcurrentHashMap#computeIfAbsent(java.lang.Object,java.util.function.Function)
    │                                                                                   │                                                                       └── com.alibaba.nacos.common.remote.client.RpcClientFactory$$Lambda$240/0x0000000800d58000#apply(java.lang.Object)
    │                                                                                   │                                                                           └── com.alibaba.nacos.common.remote.client.RpcClientFactory#lambda$createClient$0(java.lang.String,java.lang.Integer,java.lang.Integer,java.util.Map,java.lang.String)
    │                                                                                   │                                                                               └── com.alibaba.nacos.common.remote.client.RpcClient#<clinit>()
    │                                                                                   │                                                                                   └── com.alibaba.nacos.common.remote.PayloadRegistry#init()
    │                                                                                   │                                                                                       └── com.alibaba.nacos.common.remote.PayloadRegistry#scan()
    │                                                                                   │                                                                                           └── java.util.ServiceLoader$3#hasNext()
    │                                                                                   │                                                                                               └── java.util.ServiceLoader$2#hasNext()
    │                                                                                   │                                                                                                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
    │                                                                                   │                                                                                                       └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
    │                                                                                   │                                                                                                           └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
    │                                                                                   │                                                                                                               └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/com.alibaba.nacos.api.remote.Payload\\E"     }]},   "bundles":[] }
    │                                                                                   └── org.springframework.boot.context.config.ConfigDataEnvironment#processInitial(org.springframework.boot.context.config.ConfigDataEnvironmentContributors,org.springframework.boot.context.config.ConfigDataImporter)
    │                                                                                       └── org.springframework.boot.context.config.ConfigDataEnvironmentContributors#withProcessedImports(org.springframework.boot.context.config.ConfigDataImporter,org.springframework.boot.context.config.ConfigDataActivationContext)
    │                                                                                           └── org.springframework.boot.context.config.ConfigDataImporter#resolveAndLoad(org.springframework.boot.context.config.ConfigDataActivationContext,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLoaderContext,java.util.List)
    │                                                                                               ├── org.springframework.boot.context.config.ConfigDataImporter#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.Profiles,java.util.List)
    │                                                                                               │   └── org.springframework.boot.context.config.ConfigDataImporter#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.Profiles,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                               │       └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                               │           └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocationResolver,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation,org.springframework.boot.context.config.Profiles)
    │                                                                                               │               └── org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve(org.springframework.boot.context.config.ConfigDataLocation,boolean,java.util.function.Supplier)
    │                                                                                               │                   └── org.springframework.boot.context.config.ConfigDataLocationResolvers$$Lambda$158/0x0000000800d0ad30#get()
    │                                                                                               │                       └── org.springframework.boot.context.config.ConfigDataLocationResolvers#lambda$resolve$1(org.springframework.boot.context.config.ConfigDataLocationResolver,org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                               │                           └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(org.springframework.boot.context.config.ConfigDataLocationResolverContext,org.springframework.boot.context.config.ConfigDataLocation)
    │                                                                                               │                               └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(java.util.Set)
    │                                                                                               │                                   └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve(org.springframework.boot.context.config.StandardConfigDataReference)
    │                                                                                               │                                       └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolveNonPattern(org.springframework.boot.context.config.StandardConfigDataReference)
    │                                                                                               │                                           └── org.springframework.core.io.ClassPathResource#exists()
    │                                                                                               │                                               └── org.springframework.core.io.ClassPathResource#resolveURL()
    │                                                                                               │                                                   └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qapplication.yaml\\E"     }]},   "bundles":[] }
    │                                                                                               └── org.springframework.boot.context.config.ConfigDataImporter#load(org.springframework.boot.context.config.ConfigDataLoaderContext,java.util.List)
    │                                                                                                   └── org.springframework.boot.context.config.ConfigDataLoaders#load(org.springframework.boot.context.config.ConfigDataLoaderContext,org.springframework.boot.context.config.ConfigDataResource)
    │                                                                                                       └── org.springframework.boot.context.config.StandardConfigDataLoader#load(org.springframework.boot.context.config.ConfigDataLoaderContext,org.springframework.boot.context.config.ConfigDataResource)
    │                                                                                                           └── org.springframework.boot.context.config.StandardConfigDataLoader#load(org.springframework.boot.context.config.ConfigDataLoaderContext,org.springframework.boot.context.config.StandardConfigDataResource)
    │                                                                                                               ├── org.springframework.boot.context.config.ConfigDataResourceNotFoundException#throwIfDoesNotExist(org.springframework.boot.context.config.ConfigDataResource,org.springframework.core.io.Resource)
    │                                                                                                               │   └── org.springframework.core.io.ClassPathResource#exists()
    │                                                                                                               │       └── org.springframework.core.io.ClassPathResource#resolveURL()
    │                                                                                                               │           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qapplication.yaml\\E"     }]},   "bundles":[] }
    │                                                                                                               └── org.springframework.boot.env.YamlPropertySourceLoader#load(java.lang.String,org.springframework.core.io.Resource)
    │                                                                                                                   └── org.springframework.boot.env.OriginTrackedYamlLoader#load()
    │                                                                                                                       └── org.springframework.beans.factory.config.YamlProcessor#process(org.springframework.beans.factory.config.YamlProcessor$MatchCallback)
    │                                                                                                                           └── org.springframework.beans.factory.config.YamlProcessor#process(org.springframework.beans.factory.config.YamlProcessor$MatchCallback,org.yaml.snakeyaml.Yaml,org.springframework.core.io.Resource)
    │                                                                                                                               └── org.springframework.boot.origin.OriginTrackedResource#getInputStream()
    │                                                                                                                                   └── org.springframework.core.io.ClassPathResource#getInputStream()
    │                                                                                                                                       └── java.lang.ClassLoader#getResourceAsStream(java.lang.String)
    │                                                                                                                                           └── java.lang.ClassLoader#getResource(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\Qapplication.yaml\\E"     }]},   "bundles":[] }
    └── org.springframework.boot.SpringApplication#<clinit>()
        └── org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
            └── org.apache.commons.logging.LogFactory#getLog(java.lang.String)
                └── org.apache.commons.logging.LogAdapter#createLog(java.lang.String)
                    └── org.apache.commons.logging.LogAdapter$$Lambda$15/0x0000000800c066e0#apply(java.lang.Object)
                        └── org.apache.commons.logging.LogAdapter$Slf4jAdapter#createLocationAwareLog(java.lang.String)
                            └── org.slf4j.LoggerFactory#getLogger(java.lang.String)
                                └── org.slf4j.LoggerFactory#getILoggerFactory()
                                    └── org.slf4j.LoggerFactory#getProvider()
                                        └── org.slf4j.LoggerFactory#performInitialization()
                                            └── org.slf4j.LoggerFactory#bind()
                                                ├── org.slf4j.LoggerFactory#findServiceProviders()
                                                │   └── java.util.ServiceLoader$3#hasNext()
                                                │       └── java.util.ServiceLoader$2#hasNext()
                                                │           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
                                                │               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
                                                │                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
                                                │                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/org.slf4j.spi.SLF4JServiceProvider\\E"     }]},   "bundles":[] }
                                                └── ch.qos.logback.classic.spi.LogbackServiceProvider#initialize()
                                                    └── ch.qos.logback.classic.spi.LogbackServiceProvider#initializeLoggerContext()
                                                        └── ch.qos.logback.classic.util.ContextInitializer#autoConfig()
                                                            └── ch.qos.logback.classic.util.ContextInitializer#autoConfig(java.lang.ClassLoader)
                                                                └── ch.qos.logback.classic.util.ClassicEnvUtil#loadFromServiceLoader(java.lang.Class,java.lang.ClassLoader)
                                                                    └── java.util.ServiceLoader$3#hasNext()
                                                                        └── java.util.ServiceLoader$2#hasNext()
                                                                            └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
                                                                                └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
                                                                                    └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
                                                                                        └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/ch.qos.logback.classic.spi.Configurator\\E"     }]},   "bundles":[] }

