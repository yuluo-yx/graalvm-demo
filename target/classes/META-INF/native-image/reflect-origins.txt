root
└── indi.yuluo.graalvm.DemoApplication#main(java.lang.String[])
    └── org.springframework.boot.SpringApplication#run(java.lang.Class,java.lang.String[])
        └── org.springframework.boot.SpringApplication#run(java.lang.Class[],java.lang.String[])
            ├── org.springframework.boot.SpringApplication#<init>(java.lang.Class[])
            │   └── org.springframework.boot.SpringApplication#<init>(org.springframework.core.io.ResourceLoader,java.lang.Class[])
            │       └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class)
            │           └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
            │               └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
            │                   └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
            │                       └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
            │                           ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
            │                           │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.logging.NacosLoggingListener" } ]
            │                           ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
            │                           │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.logging.NacosLoggingListener",   "methods":[{"name":"<init>","parameterTypes":[] }] } ]
            │                           └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
            │                               └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
            │                                   └── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.logging.NacosLoggingListener",   "queryAllPublicConstructors":true } ]
            └── org.springframework.boot.SpringApplication#run(java.lang.String[])
                ├── org.springframework.boot.SpringApplication#handleRunFailure(org.springframework.context.ConfigurableApplicationContext,java.lang.Throwable,org.springframework.boot.SpringApplicationRunListeners)
                │   └── org.springframework.boot.SpringApplication#getExceptionReporters(org.springframework.context.ConfigurableApplicationContext)
                │       └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                │           └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                │               └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                │                   └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                │                       └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                │                           └── java.lang.reflect.Constructor#newInstance(java.lang.Object[])
                │                               └── java.lang.reflect.Constructor#newInstanceWithCaller(java.lang.Object[],boolean,java.lang.Class)
                │                                   └── jdk.internal.reflect.DelegatingConstructorAccessorImpl#newInstance(java.lang.Object[])
                │                                       └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance(java.lang.Object[])
                │                                           └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance0(java.lang.reflect.Constructor,java.lang.Object[])
                │                                               └── org.springframework.boot.diagnostics.FailureAnalyzers#<init>(org.springframework.context.ConfigurableApplicationContext)
                │                                                   └── org.springframework.boot.diagnostics.FailureAnalyzers#<init>(org.springframework.context.ConfigurableApplicationContext,org.springframework.core.io.support.SpringFactoriesLoader)
                │                                                       └── org.springframework.boot.diagnostics.FailureAnalyzers#loadFailureAnalyzers(org.springframework.context.ConfigurableApplicationContext,org.springframework.core.io.support.SpringFactoriesLoader)
                │                                                           └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                │                                                               └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                │                                                                   ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
                │                                                                   │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor$ImportExceptionFailureAnalyzer" }, {   "name":"com.alibaba.cloud.nacos.diagnostics.analyzer.NacosConnectionFailureAnalyzer" } ]
                │                                                                   ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                │                                                                   │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor$ImportExceptionFailureAnalyzer",   "methods":[{"name":"<init>","parameterTypes":[] }] }, {   "name":"com.alibaba.cloud.nacos.diagnostics.analyzer.NacosConnectionFailureAnalyzer",   "methods":[{"name":"<init>","parameterTypes":[] }] } ]
                │                                                                   └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
                │                                                                       └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
                │                                                                           ├── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor$ImportExceptionFailureAnalyzer",   "queryAllPublicConstructors":true }, {   "name":"com.alibaba.cloud.nacos.diagnostics.analyzer.NacosConnectionFailureAnalyzer",   "queryAllPublicConstructors":true } ]
                │                                                                           └── java.lang.Class#getDeclaredConstructors() - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor$ImportExceptionFailureAnalyzer",   "queryAllDeclaredConstructors":true } ]
                └── org.springframework.boot.SpringApplication#prepareEnvironment(org.springframework.boot.SpringApplicationRunListeners,org.springframework.boot.DefaultBootstrapContext,org.springframework.boot.ApplicationArguments)
                    └── org.springframework.boot.SpringApplicationRunListeners#environmentPrepared(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment)
                        └── org.springframework.boot.SpringApplicationRunListeners#doWithListeners(java.lang.String,java.util.function.Consumer)
                            └── org.springframework.boot.SpringApplicationRunListeners#doWithListeners(java.lang.String,java.util.function.Consumer,java.util.function.Consumer)
                                └── java.lang.Iterable#forEach(java.util.function.Consumer)
                                    └── org.springframework.boot.SpringApplicationRunListeners$$Lambda$91/0x0000000800ca4e58#accept(java.lang.Object)
                                        └── org.springframework.boot.SpringApplicationRunListeners#lambda$environmentPrepared$2(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment,org.springframework.boot.SpringApplicationRunListener)
                                            └── org.springframework.boot.context.event.EventPublishingRunListener#environmentPrepared(org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment)
                                                └── org.springframework.boot.context.event.EventPublishingRunListener#multicastInitialEvent(org.springframework.context.ApplicationEvent)
                                                    └── org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent)
                                                        └── org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent(org.springframework.context.ApplicationEvent,org.springframework.core.ResolvableType)
                                                            └── org.springframework.context.event.SimpleApplicationEventMulticaster#invokeListener(org.springframework.context.ApplicationListener,org.springframework.context.ApplicationEvent)
                                                                └── org.springframework.context.event.SimpleApplicationEventMulticaster#doInvokeListener(org.springframework.context.ApplicationListener,org.springframework.context.ApplicationEvent)
                                                                    └── org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEvent(org.springframework.context.ApplicationEvent)
                                                                        └── org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#onApplicationEnvironmentPreparedEvent(org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent)
                                                                            ├── org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment(org.springframework.core.env.ConfigurableEnvironment,org.springframework.boot.SpringApplication)
                                                                            │   └── org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment(org.springframework.core.env.ConfigurableEnvironment,org.springframework.core.io.ResourceLoader,java.util.Collection)
                                                                            │       └── org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#getConfigDataEnvironment(org.springframework.core.env.ConfigurableEnvironment,org.springframework.core.io.ResourceLoader,java.util.Collection)
                                                                            │           └── org.springframework.boot.context.config.ConfigDataEnvironment#<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.env.ConfigurableEnvironment,org.springframework.core.io.ResourceLoader,java.util.Collection,org.springframework.boot.context.config.ConfigDataEnvironmentUpdateListener)
                                                                            │               ├── org.springframework.boot.context.config.ConfigDataEnvironment#createConfigDataLocationResolvers(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)
                                                                            │               │   └── org.springframework.boot.context.config.ConfigDataLocationResolvers#<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader,org.springframework.core.io.support.SpringFactoriesLoader)
                                                                            │               │       └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                            │               │           └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │               │               └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │               │                   ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
                                                                            │               │                   │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLocationResolver" } ]
                                                                            │               │                   ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                            │               │                   │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLocationResolver",   "methods":[{"name":"<init>","parameterTypes":["org.springframework.boot.logging.DeferredLogFactory"] }] } ]
                                                                            │               │                   │       └── java.lang.reflect.Constructor#newInstanceWithCaller(java.lang.Object[],boolean,java.lang.Class)
                                                                            │               │                   │           └── jdk.internal.reflect.DelegatingConstructorAccessorImpl#newInstance(java.lang.Object[])
                                                                            │               │                   │               └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance(java.lang.Object[])
                                                                            │               │                   │                   └── jdk.internal.reflect.NativeConstructorAccessorImpl#newInstance0(java.lang.reflect.Constructor,java.lang.Object[])
                                                                            │               │                   │                       └── org.springframework.boot.context.config.StandardConfigDataLocationResolver#<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)
                                                                            │               │                   │                           └── org.springframework.core.io.support.SpringFactoriesLoader#loadFactories(java.lang.Class,java.lang.ClassLoader)
                                                                            │               │                   │                               └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class)
                                                                            │               │                   │                                   └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │               │                   │                                       └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │               │                   │                                           ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
                                                                            │               │                   │                                           │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.parser.NacosJsonPropertySourceLoader" }, {   "name":"com.alibaba.cloud.nacos.parser.NacosXmlPropertySourceLoader" } ]
                                                                            │               │                   │                                           ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                            │               │                   │                                           │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.parser.NacosJsonPropertySourceLoader",   "methods":[{"name":"<init>","parameterTypes":[] }] }, {   "name":"com.alibaba.cloud.nacos.parser.NacosXmlPropertySourceLoader",   "methods":[{"name":"<init>","parameterTypes":[] }] } ]
                                                                            │               │                   │                                           └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
                                                                            │               │                   │                                               └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
                                                                            │               │                   │                                                   └── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.parser.NacosJsonPropertySourceLoader",   "queryAllPublicConstructors":true }, {   "name":"com.alibaba.cloud.nacos.parser.NacosXmlPropertySourceLoader",   "queryAllPublicConstructors":true } ]
                                                                            │               │                   └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
                                                                            │               │                       └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
                                                                            │               │                           └── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLocationResolver",   "queryAllPublicConstructors":true } ]
                                                                            │               └── org.springframework.boot.context.config.ConfigDataLoaders#<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.io.support.SpringFactoriesLoader)
                                                                            │                   └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                            │                       └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │                           └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                            │                               ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
                                                                            │                               │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader" } ]
                                                                            │                               ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                            │                               │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader",   "methods":[{"name":"<init>","parameterTypes":["org.springframework.boot.logging.DeferredLogFactory"] }] } ]
                                                                            │                               └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
                                                                            │                                   └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
                                                                            │                                       └── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataLoader",   "queryAllPublicConstructors":true } ]
                                                                            └── org.springframework.boot.env.EnvironmentPostProcessorApplicationListener#getEnvironmentPostProcessors(org.springframework.core.io.ResourceLoader,org.springframework.boot.ConfigurableBootstrapContext)
                                                                                └── org.springframework.boot.env.SpringFactoriesEnvironmentPostProcessorsFactory#getEnvironmentPostProcessors(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext)
                                                                                    └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                                        └── org.springframework.core.io.support.SpringFactoriesLoader#load(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                                            └── org.springframework.core.io.support.SpringFactoriesLoader#instantiateFactory(java.lang.String,java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver,org.springframework.core.io.support.SpringFactoriesLoader$FailureHandler)
                                                                                                ├── org.springframework.util.ClassUtils#forName(java.lang.String,java.lang.ClassLoader)
                                                                                                │   └── java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor" } ]
                                                                                                ├── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#instantiate(org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
                                                                                                │   └── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor",   "methods":[{"name":"<init>","parameterTypes":[] }] } ]
                                                                                                └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#forClass(java.lang.Class)
                                                                                                    └── org.springframework.core.io.support.SpringFactoriesLoader$FactoryInstantiator#findConstructor(java.lang.Class)
                                                                                                        └── java.lang.Class#getConstructors() - [ {   "name":"com.alibaba.cloud.nacos.configdata.NacosConfigDataMissingEnvironmentPostProcessor",   "queryAllPublicConstructors":true } ]

