root
└── indi.yuluo.graalvm.DemoApplication#main(java.lang.String[])
    ├── org.springframework.boot.SpringApplication#run(java.lang.Class,java.lang.String[])
    │   └── org.springframework.boot.SpringApplication#run(java.lang.Class[],java.lang.String[])
    │       └── org.springframework.boot.SpringApplication#<init>(java.lang.Class[])
    │           └── org.springframework.boot.SpringApplication#<init>(org.springframework.core.io.ResourceLoader,java.lang.Class[])
    │               └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class)
    │                   └── org.springframework.boot.SpringApplication#getSpringFactoriesInstances(java.lang.Class,org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver)
    │                       └── org.springframework.core.io.support.SpringFactoriesLoader#forDefaultResourceLocation(java.lang.ClassLoader)
    │                           └── org.springframework.core.io.support.SpringFactoriesLoader#forResourceLocation(java.lang.String,java.lang.ClassLoader)
    │                               └── java.util.concurrent.ConcurrentMap#computeIfAbsent(java.lang.Object,java.util.function.Function)
    │                                   └── org.springframework.core.io.support.SpringFactoriesLoader$$Lambda$24/0x0000000800c1fcc8#apply(java.lang.Object)
    │                                       └── org.springframework.core.io.support.SpringFactoriesLoader#lambda$forResourceLocation$2(java.lang.ClassLoader,java.lang.ClassLoader,java.lang.String,java.lang.String)
    │                                           └── org.springframework.core.io.support.SpringFactoriesLoader#loadFactoriesResource(java.lang.ClassLoader,java.lang.String)
    │                                               └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/spring.factories\\E"     }]},   "bundles":[] }
    └── org.springframework.boot.SpringApplication#<clinit>()
        └── org.apache.commons.logging.LogFactory#getLog(java.lang.Class)
            └── org.apache.commons.logging.LogFactory#getLog(java.lang.String)
                └── org.apache.commons.logging.LogAdapter#createLog(java.lang.String)
                    └── org.apache.commons.logging.LogAdapter$$Lambda$15/0x0000000800c065a8#apply(java.lang.Object)
                        └── org.apache.commons.logging.LogAdapter$Slf4jAdapter#createLocationAwareLog(java.lang.String)
                            └── org.slf4j.LoggerFactory#getLogger(java.lang.String)
                                └── org.slf4j.LoggerFactory#getILoggerFactory()
                                    └── org.slf4j.LoggerFactory#getProvider()
                                        └── org.slf4j.LoggerFactory#performInitialization()
                                            └── org.slf4j.LoggerFactory#bind()
                                                ├── org.slf4j.LoggerFactory#findServiceProviders()
                                                │   └── java.util.ServiceLoader$3#hasNext()
                                                │       └── java.util.ServiceLoader$2#hasNext()
                                                │           └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
                                                │               └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
                                                │                   └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
                                                │                       └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/org.slf4j.spi.SLF4JServiceProvider\\E"     }]},   "bundles":[] }
                                                └── ch.qos.logback.classic.spi.LogbackServiceProvider#initialize()
                                                    └── ch.qos.logback.classic.spi.LogbackServiceProvider#initializeLoggerContext()
                                                        └── ch.qos.logback.classic.util.ContextInitializer#autoConfig()
                                                            └── ch.qos.logback.classic.util.ContextInitializer#autoConfig(java.lang.ClassLoader)
                                                                └── ch.qos.logback.classic.util.ClassicEnvUtil#loadFromServiceLoader(java.lang.Class,java.lang.ClassLoader)
                                                                    └── java.util.ServiceLoader$3#hasNext()
                                                                        └── java.util.ServiceLoader$2#hasNext()
                                                                            └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNext()
                                                                                └── java.util.ServiceLoader$LazyClassPathLookupIterator#hasNextService()
                                                                                    └── java.util.ServiceLoader$LazyClassPathLookupIterator#nextProviderClass()
                                                                                        └── java.lang.ClassLoader#getResources(java.lang.String) - {   "resources":{   "includes":[{       "pattern":"\\QMETA-INF/services/ch.qos.logback.classic.spi.Configurator\\E"     }]},   "bundles":[] }

